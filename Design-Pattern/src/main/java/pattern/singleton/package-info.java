/**
 * 单例模式（Singleton Pattern）是一个比较简单的模式，其定义如下：
 * Ensure a class has only one instance, and provide a global point of access to it.（确保某一个类
 * 只有一个实例，而且自行实例化并向整个系统提供这个实例。）
 * {@link pattern.singleton.second.Singleton}
 * <br/>
 * 单例模式的优点
 * <ol>
 *     <li>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地
 * 创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。</li>
 *     <li>由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要
 * 比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一 个单例对象，然后用永久驻留内存的方式来解决（在Java EE中采用单例模式时需要注意JVM
 * 垃圾回收机制）。</li>
 *     <li>单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在
 * 内存中，避免对同一个资源文件的同时写操作。</li>
 *     <li>单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单
 * 例类，负责所有数据表的映射处理。</li>
 * </ol>
 * 缺点
 * <ol>
 *     <li>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途
 * 径可以实现。单例模式为什么不能增加接口呢？因为接口对单例模式是没有任何意义的，它 要求“自行实例化”，并且提供单一实例、接口或抽象类是不可能被实例化的。当然，在特殊
 * 情况下，单例模式可以实现接口、被继承等，需要在系统开发中根据环境判断。</li>
 *     <li> 单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行 测试的，没有接口也不能使用mock的方式虚拟一个对象。</li>
 *     <li>单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单
 * 例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</li>
 * </ol>
 * 单例模式的使用场景
 * <ol>
 *     <li>要求生成唯一序列号的环境；</li>
 *     <li>● 在整个项目中需要一个共享访问点或共享数据，例如一个Web页面上的计数器，可以
 * 不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是线程安全的</li>
 *     <li>创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源；</li>
 *     <li>需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（当 然，也可以直接声明为static的方式）。</li>
 * </ol>
 * 注意事项
 * <ol>
 *     <li>在高并发情况下，请注意单例模式的线程同步问题。{@link pattern.singleton.shird.Singleton}</li>
 *     <li>单例模式不要实现Cloneable接口</li>
 *     <li>有上限的多例模式{@link pattern.singleton.fourth.Emperor}</li>
 *     <li>采用有上限的多例模式，我们可以在设计时决定在内存中有多少个实例，方便系统进行
 * 扩展，修正单例可能存在的性能问题，提供系统的响应速度。例如读取文件，我们可以在系 统启动时完成初始化工作，在内存中启动固定数量的reader实例，然后在需要读取文件时就
 * 可以快速响应。</li>
 *     <li>单例模式是23个模式中比较简单的模式，应用也非常广泛，如在Spring中，每个Bean默 认就是单例的，这样做的优点是Spring容器可以管理这些Bean的生命期，决定什么时候创建 出来，什么时候销毁，销毁的时候要如何处理，等等。如果采用非单例模式（Prototype类 型），则Bean初始化后的管理交由J2EE容器，Spring容器不再跟踪管理Bean的生命周期。</li>
 *     <li>spring 单例模式中，每次用户访问都会产生一个新的线程，Bean的成员变量如何保证并发安全：ThreadLocal为每个线程创建一个副本</li>
 *     <li>hreadLocal，顾名思义，它不是一个线程，而是线程的一个本地化对象。当工作于多线程中的对象使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程分配一个独立的变量副本。所以每一个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。从线程的角度看，这个变量就像是线程的本地变量，这也是类名中“Local”所要表达的意思。 </li>
 * </ol>
 * @author MayZhou
 */
package pattern.singleton;