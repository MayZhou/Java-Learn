/**
 * 迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least Knowledge Principle，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最
 * 少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调 用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public
 * 方法，我就调用这么多，其他的我一概不关心。
 * <br/>
 * <br/>
 * ！朋友类的定义是
 * 这样的：出现在成员变量、方法的输入输出参数中的类称为成员朋友类，而出现在方法体内 部的类不属于朋友类，
 * <br/>
 * <ol>
 *     <li>只和朋友交流{@link principle.lod.first.Teacher}{@link principle.lod.second.Teacher}</li>
 *     <li>朋友间也是有距离的:：两只刺猬取暖，太远取不到暖，太近刺伤了对方，必须保持一
 * 个既能取暖又不刺伤对方的距离。迪米特法则就是对这个距离进行描述，即使是朋友类之间
 * 也不能无话不说，无所不知。{@link principle.lod.third.Wizard }{@link principle.lod.fourth.Wizard}</li>
 *     <li>是自己的就是自己的:如果一个方法放在本类中，既不增加类间关
 * 系，也对本类不产生负面影响，那就放置在本类中。</li>
 *     <li>谨慎使用Serializable</li>
 *
 * </ol>
 * 迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以
 * 提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维
 * 护带来了难度。读者在采用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚
 * 低耦合。
 * @author MayZhou
 */
package principle.lod;